{"title":"JS 本地对象和内置对象","slug":"js-object","date":"2019-03-20T07:24:47.000Z","updated":"2019-03-20T08:02:36.164Z","comments":true,"path":"api/articles/js-object.json","photos":[],"link":"","excerpt":"1. 概述JavaScript 中的所有事物都是对象：字符串、数值、数组、函数…<br>JavaScript 提供多个内建对象，比如：String、Date、Array 等等。<br>对象只是带有属性和方法的特殊数据类型。<br>","covers":["/2019/03/20/js-object/ArrayPrototype.JPG","/2019/03/20/js-object/ArrayMethod.JPG","/2019/03/20/js-object/BooleanPrototype.JPG","/2019/03/20/js-object/BooleanMethod.JPG","/2019/03/20/js-object/DatePrototype.JPG","/2019/03/20/js-object/DateMethod01.JPG","/2019/03/20/js-object/MathPrototype.JPG","/2019/03/20/js-object/MathMethod.JPG","/2019/03/20/js-object/NumberPrototype.JPG","/2019/03/20/js-object/NumberMethod.JPG","/2019/03/20/js-object/StringPrototype.JPG","/2019/03/20/js-object/StringMethod.JPG","/2019/03/20/js-object/RegExpDescription.JPG","/2019/03/20/js-object/RegExpSquare.JPG","/2019/03/20/js-object/RegExpMeta.JPG","/2019/03/20/js-object/RegExpQuantify.JPG","/2019/03/20/js-object/RegExpPrototype.JPG","/2019/03/20/js-object/RegExpMethod.JPG","/2019/03/20/js-object/RegExpStringObj.JPG","/2019/03/20/js-object/TopFunction.JPG","/2019/03/20/js-object/TopPrototype.JPG","/2019/03/20/js-object/JSEvents.JPG"],"content":"<h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><p>JavaScript 中的所有事物都是对象：字符串、数值、数组、函数…<br>JavaScript 提供多个内建对象，比如：String、Date、Array 等等。<br>对象只是带有<strong>属性和方法</strong>的特殊数据类型。<br><a id=\"more\"></a><br>访问对象的属性：objectName.propertyName<br>访问对象的方法：objectName.methodName()  </p>\n<hr>\n<p>##2. JS Array 对象<br>用于在单个的变量中存储多个值。</p>\n<h3 id=\"2-1-创建语法\"><a href=\"#2-1-创建语法\" class=\"headerlink\" title=\"2.1 创建语法\"></a>2.1 创建语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Array();</span><br><span class=\"line\">new Array(size);</span><br><span class=\"line\">new Array(element0, element1, ..., elementn);</span><br></pre></td></tr></table></figure>\n<p>参数 <code>size</code> 是期望的数组元素个数。返回的数组中 <code>length</code> 字段将被设为 <code>size</code> 的值。<br>参数 <code>element ..., elementn</code> 是参数列表。当使用这些参数来调用构造函数 <code>Array()</code> 时，新创建的数组的元素就会被初始化为这些值。它的 <code>length</code> 字段也会被设置为参数的个数。<br><strong>返回值：</strong><br>返回新创建并被初始化了的数组。<br>如果调用构造函数 <code>Array()</code> 时没有使用参数，那么返回的数组为空，<code>length</code> 字段为 0。<br>当调用构造函数时只传递给它一个数字参数，该构造函数将返回具有指定个数、元素为 <code>undefined</code> 的数组。<br>当其他参数调用 <code>Array()</code> 时，该构造函数将用参数指定的值初始化数组。<br>当把构造函数作为函数调用，不使用 <code>new</code> 运算符时，它的行为与使用 <code>new</code> 运算符调用它时的行为完全一样。  </p>\n<h3 id=\"2-2-对象属性\"><a href=\"#2-2-对象属性\" class=\"headerlink\" title=\"2.2 对象属性\"></a>2.2 对象属性</h3><p><img src=\"/2019/03/20/js-object/ArrayPrototype.JPG\" alt=\"ArrayPrototype\"></p>\n<h3 id=\"2-3-对象方法\"><a href=\"#2-3-对象方法\" class=\"headerlink\" title=\"2.3 对象方法\"></a>2.3 对象方法</h3><p><img src=\"/2019/03/20/js-object/ArrayMethod.JPG\" alt=\"ArrayMethod\"></p>\n<hr>\n<h2 id=\"3-JS-Boolean-对象\"><a href=\"#3-JS-Boolean-对象\" class=\"headerlink\" title=\"3. JS Boolean 对象\"></a>3. JS Boolean 对象</h2><p><code>Boolean</code> 对象表示两个值：<code>true</code> 或 <code>false</code>。</p>\n<h3 id=\"3-1-创建语法\"><a href=\"#3-1-创建语法\" class=\"headerlink\" title=\"3.1 创建语法\"></a>3.1 创建语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Boolean(value);\t//构造函数</span><br><span class=\"line\">Boolean(value);\t\t//转换函数</span><br></pre></td></tr></table></figure>\n<p>参数 <code>value</code> 为布尔对象存放的值或者要转换成布尔值的值。<br><strong>返回值：</strong><br>当作为一个构造函数（带有运算符 <code>new</code>）调用时，<code>Boolean()</code> 将把它的参数转换成一个布尔值，并且返回一个包含该值的 <code>Boolean</code> 对象。<br>如果作为一个函数（不带有运算符 <code>new</code>）调用时，<code>Boolean()</code> 只将把它的参数转换成一个原始的布尔值，并且返回这个值。<br><strong>注：</strong>如果省略 <code>value</code> 参数，或者设置为 <code>0、-0、null、&quot;&quot;、false、undefined 或 NaN</code>，则该对象设置为 <code>false</code>。否则设置为 <code>true</code>（即使 <code>value</code> 参数是字符串 <code>false</code>）。</p>\n<h3 id=\"3-2-对象属性\"><a href=\"#3-2-对象属性\" class=\"headerlink\" title=\"3.2 对象属性\"></a>3.2 对象属性</h3><p><img src=\"/2019/03/20/js-object/BooleanPrototype.JPG\" alt=\"BooleanPrototype\"></p>\n<p>###3.3 对象方法<br><img src=\"/2019/03/20/js-object/BooleanMethod.JPG\" alt=\"BooleanMethod\"></p>\n<hr>\n<h2 id=\"4-JS-Date-对象\"><a href=\"#4-JS-Date-对象\" class=\"headerlink\" title=\"4. JS Date 对象\"></a>4. JS Date 对象</h2><p>用于处理日期和时间。</p>\n<h3 id=\"4-1-创建语法\"><a href=\"#4-1-创建语法\" class=\"headerlink\" title=\"4.1 创建语法\"></a>4.1 创建语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Date 对象会自动把当前日期和时间保存为其初始值。</span><br><span class=\"line\">var myDate=new Date()</span><br></pre></td></tr></table></figure>\n<p>###4.2 对象属性<br><img src=\"/2019/03/20/js-object/DatePrototype.JPG\" alt=\"DatePrototype\"></p>\n<p>###4.3 对象方法<br><img src=\"/2019/03/20/js-object/DateMethod01.JPG\" alt=\"DateMethod01\"><br><img src=\"/2019/03/20/js-object/DateMethod02.JPG\" alt=\"DateMethod02\"></p>\n<hr>\n<h2 id=\"5-JS-Math-对象\"><a href=\"#5-JS-Math-对象\" class=\"headerlink\" title=\"5. JS Math 对象\"></a>5. JS Math 对象</h2><p>用于执行数学任务。</p>\n<h3 id=\"5-1-使用语法\"><a href=\"#5-1-使用语法\" class=\"headerlink\" title=\"5.1 使用语法\"></a>5.1 使用语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用 Math 的属性</span><br><span class=\"line\">var pi_value=Math.PI;</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用 Math 的方法</span><br><span class=\"line\">var sqrt_value=Math.sqrt(15);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：<code>Math</code> 对象并不像 <code>Date</code> 和 <code>String</code> 那样是对象的类，因此没有构造函数 <code>Math()</code>，像 <code>Math.sin()</code> 这样的函数只是函数，不是某个对象的方法。您无需创建它，通过把 <code>Math</code> 作为对象使用就可以调用其所有属性和方法。</p>\n</blockquote>\n<h3 id=\"5-2-对象属性\"><a href=\"#5-2-对象属性\" class=\"headerlink\" title=\"5.2 对象属性\"></a>5.2 对象属性</h3><p><img src=\"/2019/03/20/js-object/MathPrototype.JPG\" alt=\"MathPrototype\"></p>\n<h3 id=\"5-3-对象方法\"><a href=\"#5-3-对象方法\" class=\"headerlink\" title=\"5.3 对象方法\"></a>5.3 对象方法</h3><p><img src=\"/2019/03/20/js-object/MathMethod.JPG\" alt=\"MathMethod\"></p>\n<hr>\n<h2 id=\"6-JS-Number-对象\"><a href=\"#6-JS-Number-对象\" class=\"headerlink\" title=\"6. JS Number 对象\"></a>6. JS Number 对象</h2><p>是原始数值的包装对象。<br>所有 JavaScript 数字均为 64 位。<br><strong>数值写法：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var pi=3.14;    // 使用小数点</span><br><span class=\"line\">var x=34;       // 不使用小数点</span><br><span class=\"line\"></span><br><span class=\"line\">// 极大或极小的数字可通过科学（指数）计数法来写</span><br><span class=\"line\">var y=123e5;    // 12300000</span><br><span class=\"line\">var z=123e-5;   // 0.00123</span><br></pre></td></tr></table></figure></p>\n<p><strong>数值精度：</strong><br>整数最多为 15 位。<br>小数的最大位数是 17，但是浮点运算并不总是 100% 准确。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=0.2+0.1;</span><br><span class=\"line\">// 结果</span><br><span class=\"line\">x = 0.30000000000000004</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-1-创建语法\"><a href=\"#6-1-创建语法\" class=\"headerlink\" title=\"6.1 创建语法\"></a>6.1 创建语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myNum=new Number(value);</span><br><span class=\"line\">var myNum=Number(value);</span><br></pre></td></tr></table></figure>\n<p>参数 <code>value</code> 是要创建的 <code>Number</code> 对象的数值，或是要转换成数字的值。<br><strong>返回值：</strong><br>当 <code>Number()</code> 和运算符 <code>new</code> 一起作为构造函数使用时，它返回一个新创建的 <code>Number</code> 对象。如果不用 <code>new</code> 运算符，把 <code>Number()</code> 作为一个函数来调用，它将把自己的参数转换成一个原始的数值，并且返回这个值（如果转换失败，则返回 <code>NaN</code>）。</p>\n<h3 id=\"6-2-对象属性\"><a href=\"#6-2-对象属性\" class=\"headerlink\" title=\"6.2 对象属性\"></a>6.2 对象属性</h3><p><img src=\"/2019/03/20/js-object/NumberPrototype.JPG\" alt=\"NumberPrototype\"></p>\n<h3 id=\"6-3-对象方法\"><a href=\"#6-3-对象方法\" class=\"headerlink\" title=\"6.3 对象方法\"></a>6.3 对象方法</h3><p><img src=\"/2019/03/20/js-object/NumberMethod.JPG\" alt=\"NumberMethod\"></p>\n<hr>\n<h2 id=\"7-JS-String-对象\"><a href=\"#7-JS-String-对象\" class=\"headerlink\" title=\"7. JS String 对象\"></a>7. JS String 对象</h2><p>用于处理文本（字符串）。  </p>\n<blockquote>\n<p>注：JavaScript 的字符串是不可变的（immutable），<code>String</code> 类定义的方法都不能改变字符串的内容。像 <code>String.toUpperCase()</code> 这样的方法，返回的是全新的字符串，而不是修改原始字符串。</p>\n</blockquote>\n<h3 id=\"7-1-创建语法\"><a href=\"#7-1-创建语法\" class=\"headerlink\" title=\"7.1 创建语法\"></a>7.1 创建语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new String(s);</span><br><span class=\"line\">String(s);</span><br></pre></td></tr></table></figure>\n<p>参数 <code>s</code> 是要存储在 <code>String</code> 对象中或转换成原始字符串的值。<br><strong>返回值：</strong><br>当 <code>String()</code> 和运算符 <code>new</code> 一起作为构造函数使用时，它返回一个新创建的 <code>String</code> 对象，存放的是字符串 <code>s</code> 或 s 的字符串表示。<br>当不用 <code>new</code> 运算符调用 <code>String()</code> 时，它只把 <code>s</code> 转换成原始的字符串，并返回转换后的值。</p>\n<h3 id=\"7-2-对象属性\"><a href=\"#7-2-对象属性\" class=\"headerlink\" title=\"7.2 对象属性\"></a>7.2 对象属性</h3><p><img src=\"/2019/03/20/js-object/StringPrototype.JPG\" alt=\"StringPrototype\"></p>\n<h3 id=\"7-3-对象方法\"><a href=\"#7-3-对象方法\" class=\"headerlink\" title=\"7.3 对象方法\"></a>7.3 对象方法</h3><p><img src=\"/2019/03/20/js-object/StringMethod.JPG\" alt=\"StringMethod\"></p>\n<hr>\n<h2 id=\"8-JS-RegExp-对象\"><a href=\"#8-JS-RegExp-对象\" class=\"headerlink\" title=\"8. JS RegExp 对象\"></a>8. JS RegExp 对象</h2><p>此对象表示正则表达式，它是对字符串执行模式匹配的强大工具。</p>\n<h3 id=\"8-1-创建语法\"><a href=\"#8-1-创建语法\" class=\"headerlink\" title=\"8.1 创建语法\"></a>8.1 创建语法</h3><p><strong>直接量语法：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/pattern/attributes</span><br></pre></td></tr></table></figure></p>\n<p><strong>创建 RegExp 对象的语法：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new RegExp(pattern, attributes);</span><br></pre></td></tr></table></figure></p>\n<p>参数 <code>pattern</code> 是一个字符串，指定了正则表达式的模式或其他正则表达式。<br>参数 <code>attributes</code> 是一个可选的字符串，包含属性 <code>&quot;g&quot;、&quot;i&quot; 和 &quot;m&quot;</code>，分别用于指定全局匹配、区分大小写的匹配和多行匹配。如果 <code>pattern</code> 是正则表达式，而不是字符串，则必须省略该参数。<br><strong>返回值：</strong><br>一个新的 <code>RegExp</code> 对象，具有指定的模式和标志。如果参数 <code>pattern</code> 是正则表达式而不是字符串，那么 <code>RegExp()</code> 构造函数将用与指定的 <code>RegExp</code> 相同的模式和标志创建一个新的 <code>RegExp</code> 对象。<br>如果不用 <code>new</code> 运算符，而将 <code>RegExp()</code> 作为函数调用，那么它的行为与用 <code>new</code> 运算符调用时一样，只是当 <code>pattern</code> 是正则表达式时，它只返回 <code>pattern</code>，而不再创建一个新的 <code>RegExp</code> 对象。<br><strong>抛出：</strong><br><code>SyntaxError</code> - 如果 <code>pattern</code> 不是合法的正则表达式，或 <code>attributes</code> 含有 <code>&quot;g&quot;、&quot;i&quot; 和 &quot;m&quot;</code> 之外的字符，抛出该异常。<br><code>TypeError</code> - 如果 <code>pattern</code> 是 <code>RegExp</code> 对象，但没有省略 <code>attributes</code> 参数，抛出该异常。</p>\n<h3 id=\"8-2-修饰符\"><a href=\"#8-2-修饰符\" class=\"headerlink\" title=\"8.2 修饰符\"></a>8.2 修饰符</h3><p><img src=\"/2019/03/20/js-object/RegExpDescription.JPG\" alt=\"RegExpDescription\"></p>\n<h3 id=\"8-3-方括号\"><a href=\"#8-3-方括号\" class=\"headerlink\" title=\"8.3 方括号\"></a>8.3 方括号</h3><p>方括号用于查找某个范围内的字符。<br><img src=\"/2019/03/20/js-object/RegExpSquare.JPG\" alt=\"RegExpSquare\"></p>\n<h3 id=\"8-4-元字符\"><a href=\"#8-4-元字符\" class=\"headerlink\" title=\"8.4 元字符\"></a>8.4 元字符</h3><p>元字符（Metacharacter）是拥有特殊含义的字符。<br><img src=\"/2019/03/20/js-object/RegExpMeta.JPG\" alt=\"RegExpMeta\"></p>\n<h3 id=\"8-5-量词\"><a href=\"#8-5-量词\" class=\"headerlink\" title=\"8.5 量词\"></a>8.5 量词</h3><p><img src=\"/2019/03/20/js-object/RegExpQuantify.JPG\" alt=\"RegExpQuantify\"></p>\n<h3 id=\"8-6-对象属性\"><a href=\"#8-6-对象属性\" class=\"headerlink\" title=\"8.6 对象属性\"></a>8.6 对象属性</h3><p><img src=\"/2019/03/20/js-object/RegExpPrototype.JPG\" alt=\"RegExpPrototype\"></p>\n<h3 id=\"8-7-对象方法\"><a href=\"#8-7-对象方法\" class=\"headerlink\" title=\"8.7 对象方法\"></a>8.7 对象方法</h3><p><img src=\"/2019/03/20/js-object/RegExpMethod.JPG\" alt=\"RegExpMethod\"></p>\n<h3 id=\"8-8-支持正则表达式的-String-对象的方法\"><a href=\"#8-8-支持正则表达式的-String-对象的方法\" class=\"headerlink\" title=\"8.8 支持正则表达式的 String 对象的方法\"></a>8.8 支持正则表达式的 String 对象的方法</h3><p><img src=\"/2019/03/20/js-object/RegExpStringObj.JPG\" alt=\"RegExpStringObj\"></p>\n<hr>\n<h2 id=\"9-JS-全局对象\"><a href=\"#9-JS-全局对象\" class=\"headerlink\" title=\"9. JS 全局对象\"></a>9. JS 全局对象</h2><p>全局对象是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。全局对象不是任何对象的属性，所以它没有名称。<br>在顶层 JavaScript 代码中，可以用关键字 <code>this</code> 引用全局对象。但通常不必用这种方式引用全局对象，因为全局对象是作用域链的头，这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询。</p>\n<h3 id=\"9-1-顶层函数（全局函数）\"><a href=\"#9-1-顶层函数（全局函数）\" class=\"headerlink\" title=\"9.1 顶层函数（全局函数）\"></a>9.1 顶层函数（全局函数）</h3><p><img src=\"/2019/03/20/js-object/TopFunction.JPG\" alt=\"TopFunction\"></p>\n<h3 id=\"9-2-顶层属性（全局属性）\"><a href=\"#9-2-顶层属性（全局属性）\" class=\"headerlink\" title=\"9.2 顶层属性（全局属性）\"></a>9.2 顶层属性（全局属性）</h3><p><img src=\"/2019/03/20/js-object/TopPrototype.JPG\" alt=\"TopPrototype\"></p>\n<hr>\n<h2 id=\"10-JS-事件句柄\"><a href=\"#10-JS-事件句柄\" class=\"headerlink\" title=\"10. JS 事件句柄\"></a>10. JS 事件句柄</h2><p>HTML 4.0 的新特性之一是有能力使 HTML 事件触发浏览器中的动作（action），比如当用户点击某个 HTML 元素时启动一段 JavaScript。下面是一个属性列表，这些属性可插入 HTML 标签来定义事件动作。<br><img src=\"/2019/03/20/js-object/JSEvents.JPG\" alt=\"JSEvents\"></p>\n","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}]}