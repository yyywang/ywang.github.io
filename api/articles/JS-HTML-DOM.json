{"title":"JS HTML DOM","slug":"JS-HTML-DOM","date":"2019-01-16T13:22:13.000Z","updated":"2019-01-16T13:46:19.535Z","comments":true,"path":"api/articles/JS-HTML-DOM.json","photos":[],"link":"","excerpt":"1. DOM（Document Object Model）DOM 是 W3C（万维网联盟）的标准。<br>DOM 定义了访问 HTML 和 XML 文档的标准：<br>“W3C 文档对象模型（DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档地内容、结构和样式。”<br>","covers":["/2019/01/16/JS-HTML-DOM/HTML_DOM_Tree.gif","/2019/01/16/JS-HTML-DOM/DOM_fun.JPG","/2019/01/16/JS-HTML-DOM/nodeType.JPG"],"content":"<h2 id=\"1-DOM（Document-Object-Model）\"><a href=\"#1-DOM（Document-Object-Model）\" class=\"headerlink\" title=\"1. DOM（Document Object Model）\"></a>1. DOM（Document Object Model）</h2><p>DOM 是 W3C（万维网联盟）的标准。<br>DOM 定义了访问 HTML 和 XML 文档的标准：<br>“W3C 文档对象模型（DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档地内容、结构和样式。”<br><a id=\"more\"></a><br>W3C DOM 标准被分为 3 个不同地部分：  </p>\n<ul>\n<li>核心 DOM - 针对任何结构化文档地标准模型。  </li>\n<li>XML DOM - 针对 XML 文档地标准模型。  </li>\n<li>HTML DOM - 针对 HTML 文档地标准模型。<br>通过 HTML DOM，可访问 JavaScript HTML 文档的所有元素。</li>\n</ul>\n<h3 id=\"1-1-HTML-DOM\"><a href=\"#1-1-HTML-DOM\" class=\"headerlink\" title=\"1.1 HTML DOM\"></a>1.1 HTML DOM</h3><p>HTML DOM 定义了所有 HTML 元素地对象和属性，以及访问它们地方法。<br>当网页被加载时，浏览器会创建页面的文档对象模型。HTML DOM 模型被构造为对象的树。</p>\n<hr>\n<h2 id=\"2-HTML-DOM-节点\"><a href=\"#2-HTML-DOM-节点\" class=\"headerlink\" title=\"2. HTML DOM 节点\"></a>2. HTML DOM 节点</h2><p>在 HTML DOM 中，所有事物都是节点。DOM 是被视为节点树的 HTML。  </p>\n<ul>\n<li>整个文档是一个文档节点  </li>\n<li>每个 HTML 元素是元素节点  </li>\n<li>HTML 元素内的文本是文本节点  </li>\n<li>每个 HTML 属性是属性节点  </li>\n<li>注释是注释节点</li>\n</ul>\n<h3 id=\"2-1-HTML-DOM-节点树\"><a href=\"#2-1-HTML-DOM-节点树\" class=\"headerlink\" title=\"2.1 HTML DOM 节点树\"></a>2.1 HTML DOM 节点树</h3><p>HTML DOM 将 HTML 文档视作树结构。这种结构被称为节点树：<br><img src=\"/2019/01/16/JS-HTML-DOM/HTML_DOM_Tree.gif\" alt=\"HTML_DOM_Tree\"></p>\n<h3 id=\"2-2-节点父、子和同胞\"><a href=\"#2-2-节点父、子和同胞\" class=\"headerlink\" title=\"2.2 节点父、子和同胞\"></a>2.2 节点父、子和同胞</h3><p>节点树中的节点彼此拥有层级关系（父 - parent，子 - child，同胞 - sibling）。  </p>\n<blockquote>\n<p>注：DOM 处理中的常见错误是希望元素节点包含文本。</p>\n</blockquote>\n<hr>\n<h2 id=\"3-HTML-DOM-方法\"><a href=\"#3-HTML-DOM-方法\" class=\"headerlink\" title=\"3. HTML DOM 方法\"></a>3. HTML DOM 方法</h2><p>方法是我们可以在节点（HTML 元素）上执行的动作。</p>\n<h3 id=\"3-1-编程接口\"><a href=\"#3-1-编程接口\" class=\"headerlink\" title=\"3.1 编程接口\"></a>3.1 编程接口</h3><p>可通过 JavaScript（以及其他编程语言）对 HTML DOM 进行访问。<br>所有 HTML 元素被定义为对象，而编程接口则是对象方法和对象属性。<br>方法是能够执行的动作（比如添加或修改元素）。<br>属性是能够获取或设置的值（比如节点的名称或内容）。</p>\n<h3 id=\"3-2-方法和属性\"><a href=\"#3-2-方法和属性\" class=\"headerlink\" title=\"3.2 方法和属性\"></a>3.2 方法和属性</h3><p>一些常用的 HTML DOM 方法：  </p>\n<ul>\n<li><code>getElementById(id)</code> - 获取带有指定 id 的节点（元素）  </li>\n<li><code>appendChild(node)</code> - 插入新的子节点（元素）  </li>\n<li><code>removeChild(node)</code> - 删除子节点（元素）<br>一些常用的 HTML DOM 属性：  </li>\n<li><code>innerHTML</code> - 节点（元素）的文本值  </li>\n<li><code>parentNode</code> - 节点（元素）的父节点  </li>\n<li><code>childNodes</code> - 节点（元素）的子节点  </li>\n<li><code>attributes</code> - 节点（元素）的属性节点</li>\n</ul>\n<h3 id=\"3-3-一些常用-DOM-方法\"><a href=\"#3-3-一些常用-DOM-方法\" class=\"headerlink\" title=\"3.3 一些常用 DOM 方法\"></a>3.3 一些常用 DOM 方法</h3><p><img src=\"/2019/01/16/JS-HTML-DOM/DOM_fun.JPG\" alt=\"DOM_fun.JPG\"></p>\n<hr>\n<h2 id=\"4-HTML-DOM-属性\"><a href=\"#4-HTML-DOM-属性\" class=\"headerlink\" title=\"4. HTML DOM 属性\"></a>4. HTML DOM 属性</h2><p>属性是节点（HTML 元素）的值，能够获取或设置。</p>\n<h3 id=\"4-1-编程接口\"><a href=\"#4-1-编程接口\" class=\"headerlink\" title=\"4.1 编程接口\"></a>4.1 编程接口</h3><p>可通过 JavaScript（以及其他编程语言）对HTML DOM 进行访问。<br>所有 HTML 元素被定义为对象，而编程接口则是对象方法和对象属性。<br>方法是能够执行的动作（比如添加或修改元素）。<br>属性是能够获取或设置的值（比如节点的名称或内容）。  </p>\n<h3 id=\"4-2-innerHTML-属性\"><a href=\"#4-2-innerHTML-属性\" class=\"headerlink\" title=\"4.2 innerHTML 属性\"></a>4.2 <code>innerHTML</code> 属性</h3><p>获取元素内容的最简单方法是使用 <code>innerHTML</code> 属性。<br><code>innerHTML</code> 属性对于获取或替换 HTML 元素的内容很有用。</p>\n<h3 id=\"4-3-nodeName-属性\"><a href=\"#4-3-nodeName-属性\" class=\"headerlink\" title=\"4.3 nodeName 属性\"></a>4.3 <code>nodeName</code> 属性</h3><p><code>nodeName</code> 属性规定节点的名称。  </p>\n<ul>\n<li><code>nodeName</code> 是只读的  </li>\n<li>元素节点的 <code>nodeName</code> 与标签名相同  </li>\n<li>属性节点的 <code>nodeName</code> 与属性名相同  </li>\n<li>文本节点的 <code>nodeName</code> 始终是 <code>#text</code>  </li>\n<li>文档节点的 <code>nodeName</code> 始终是 <code>#document</code></li>\n</ul>\n<blockquote>\n<p>注：<code>nodeName</code> 始终包含 HTML 元素的大写字母标签名。</p>\n</blockquote>\n<h3 id=\"4-4-nodeValue-属性\"><a href=\"#4-4-nodeValue-属性\" class=\"headerlink\" title=\"4.4 nodeValue 属性\"></a>4.4 <code>nodeValue</code> 属性</h3><p><code>nodeValue</code> 属性规定节点的值。  </p>\n<ul>\n<li>元素节点的 <code>nodeValue</code> 是 <code>undefined</code> 或 <code>null</code>  </li>\n<li>文本节点的 <code>nodeValue</code> 是文本本身  </li>\n<li>属性节点的 <code>nodeValue</code> 是属性值</li>\n</ul>\n<h3 id=\"4-5-nodeType-属性\"><a href=\"#4-5-nodeType-属性\" class=\"headerlink\" title=\"4.5 nodeType 属性\"></a>4.5 <code>nodeType</code> 属性</h3><p><code>nodeType</code> 属性返回节点的类型。<code>nodeType</code> 是只读的。<br><img src=\"/2019/01/16/JS-HTML-DOM/nodeType.JPG\" alt=\"nodeType.JPG\"></p>\n<hr>\n<h2 id=\"5-HTML-DOM-访问\"><a href=\"#5-HTML-DOM-访问\" class=\"headerlink\" title=\"5. HTML DOM 访问\"></a>5. HTML DOM 访问</h2><p>访问 HTML 元素等同于访问节点，3 个方法：  </p>\n<ul>\n<li><code>getElementById(&quot;id&quot;)</code> - 返回带有指定 ID 的元素。  </li>\n<li><code>getElementsByTagName(&quot;TageName&quot;)</code> - 返回带有指定标签名的所有元素。  </li>\n<li><code>getElementsByClassName(&quot;ClassName&quot;)</code> - 返回带有指定类名的所有元素。</li>\n</ul>\n<blockquote>\n<p>注：getElementsByClassName() 在 IE 5，6，7，8 中无效。</p>\n</blockquote>\n<hr>\n<h2 id=\"6-HTML-DOM-修改\"><a href=\"#6-HTML-DOM-修改\" class=\"headerlink\" title=\"6. HTML DOM 修改\"></a>6. HTML DOM 修改</h2><p>修改 HTML = 改变元素、属性、样式和事件。  </p>\n<ul>\n<li>改变 HTML 内容</li>\n<li>改变 CSS 样式</li>\n<li>改变 HTML 属性</li>\n<li>创建新的 HTML 元素</li>\n<li>删除已有的 HTML 元素</li>\n<li>改变事件（处理程序）</li>\n</ul>\n<h3 id=\"6-1-改变-HTML-内容\"><a href=\"#6-1-改变-HTML-内容\" class=\"headerlink\" title=\"6.1 改变 HTML 内容\"></a>6.1 改变 HTML 内容</h3><p>最简单的是使用 <code>innerHTML</code> 属性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(id).innerHTML = *new HTML*</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-2-改变-HTML-属性\"><a href=\"#6-2-改变-HTML-属性\" class=\"headerlink\" title=\"6.2 改变 HTML 属性\"></a>6.2 改变 HTML 属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(id).attribute = *new value*</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-3-改变-HTML-样式\"><a href=\"#6-3-改变-HTML-样式\" class=\"headerlink\" title=\"6.3 改变 HTML 样式\"></a>6.3 改变 HTML 样式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(id).style.property = *new style*</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-4-使用事件\"><a href=\"#6-4-使用事件\" class=\"headerlink\" title=\"6.4 使用事件\"></a>6.4 使用事件</h3><h3 id=\"6-5-改变-HTML-输出流\"><a href=\"#6-5-改变-HTML-输出流\" class=\"headerlink\" title=\"6.5 改变 HTML 输出流\"></a>6.5 改变 HTML 输出流</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.writ()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：绝不要在文档加载之后使用 <code>document.write()</code>。这会覆盖该文档。</p>\n</blockquote>\n<hr>\n<h2 id=\"7-HTML-DOM-元素\"><a href=\"#7-HTML-DOM-元素\" class=\"headerlink\" title=\"7. HTML DOM 元素\"></a>7. HTML DOM 元素</h2><p>添加、删除和替换 HTML 元素。</p>\n<h3 id=\"7-1-创建新的-HTML-元素-apendChild\"><a href=\"#7-1-创建新的-HTML-元素-apendChild\" class=\"headerlink\" title=\"7.1 创建新的 HTML 元素 - apendChild()\"></a>7.1 创建新的 HTML 元素 - <code>apendChild()</code></h3><p>如需向 HTML DOM 添加新元素，必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">//  创建新的 &lt;p&gt; 元素</span><br><span class=\"line\">var para=document.createElement(&quot;p&quot;);</span><br><span class=\"line\">//  创建新的文本节点</span><br><span class=\"line\">var node=document.createTextNode(&quot;这是新段落。&quot;);</span><br><span class=\"line\">//  向 &lt;p&gt; 元素追加这个文本节点</span><br><span class=\"line\">para.appendChild(node);</span><br><span class=\"line\"></span><br><span class=\"line\">//  向一个已有的元素追加这个新元素</span><br><span class=\"line\">//  appendChild() 将新元素作为父元素的最后一个子元素进行添加</span><br><span class=\"line\">var element=document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">element.appendChild(para);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-2-创建新的-HTML-元素-insertBefore\"><a href=\"#7-2-创建新的-HTML-元素-insertBefore\" class=\"headerlink\" title=\"7.2 创建新的 HTML 元素 - insertBefore()\"></a>7.2 创建新的 HTML 元素 - <code>insertBefore()</code></h3><p>在指定的子节点前插入新的字节点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  element 为父节点</span><br><span class=\"line\">//  para 为要插入的新节点</span><br><span class=\"line\">//  child 为指定的子节点</span><br><span class=\"line\">element.insertBefore(para, child);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-3-删除已有的-HTML-元素-removeChild\"><a href=\"#7-3-删除已有的-HTML-元素-removeChild\" class=\"headerlink\" title=\"7.3 删除已有的 HTML 元素 - removeChild()\"></a>7.3 删除已有的 HTML 元素 - <code>removeChild()</code></h3><p>如需删除 HTML 元素，必须首先获得该元素的父元素。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var parent=document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">var child=document.getElementById(&quot;p1&quot;);</span><br><span class=\"line\">parent.removeChild(child);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>可以这样：找到希望删除的子元素，然后使用其 <code>parentNode</code> 属性来找到父元素。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var child=document.getElementById(&quot;p1&quot;);</span><br><span class=\"line\">child.parentNode.removeChild(child);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7-4-替换-HTML-元素-replaceChild\"><a href=\"#7-4-替换-HTML-元素-replaceChild\" class=\"headerlink\" title=\"7.4 替换 HTML 元素 - replaceChild()\"></a>7.4 替换 HTML 元素 - <code>replaceChild()</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  parent 为要替换节点的父节点</span><br><span class=\"line\">//  para 为新节点</span><br><span class=\"line\">//  child 为要替换的节点</span><br><span class=\"line\">parent.replaceChild(para, child);</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"8-HTML-DOM-事件\"><a href=\"#8-HTML-DOM-事件\" class=\"headerlink\" title=\"8. HTML DOM 事件\"></a>8. HTML DOM 事件</h2><p>HTML DOM 使 JavaScript 有能力对 HTML 事件做出反应。</p>\n<h3 id=\"8-1-对事件做出反应\"><a href=\"#8-1-对事件做出反应\" class=\"headerlink\" title=\"8.1 对事件做出反应\"></a>8.1 对事件做出反应</h3><p>可以在事件发生时执行 JavaScript，比如当用户在 HTML 元素上点击时。<br>如需在用户点击某个元素时执行代码，请向一个 HTML 事件属性添加 JavaScript 代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onclick = JavaScript</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"8-2-使用-HTML-DOM-来分配事件\"><a href=\"#8-2-使用-HTML-DOM-来分配事件\" class=\"headerlink\" title=\"8.2 使用 HTML DOM 来分配事件\"></a>8.2 使用 HTML DOM 来分配事件</h3><p>例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.getElementById(&quot;id&quot;).onclick = function() &#123;...&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"8-3-onload-和-onunload-事件\"><a href=\"#8-3-onload-和-onunload-事件\" class=\"headerlink\" title=\"8.3 onload 和 onunload 事件\"></a>8.3 <code>onload</code> 和 <code>onunload</code> 事件</h3><p><code>onload</code> 和 <code>onunload</code> 事件会在用户进入或离开页面时被触发。<br><code>onload</code> 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本。<br><code>onload</code> 和 <code>onunload</code> 事件可用于处理 <code>cookie</code>。</p>\n<h3 id=\"8-4-onchange-事件\"><a href=\"#8-4-onchange-事件\" class=\"headerlink\" title=\"8.4 onchange 事件\"></a>8.4 <code>onchange</code> 事件</h3><p><code>onchange</code> 事件常结合对输入字段的验证来使用。</p>\n<h3 id=\"8-5-onmouseover-和-onmouseout-事件\"><a href=\"#8-5-onmouseover-和-onmouseout-事件\" class=\"headerlink\" title=\"8.5 onmouseover 和 onmouseout 事件\"></a>8.5 <code>onmouseover</code> 和 <code>onmouseout</code> 事件</h3><p>可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数。</p>\n<h3 id=\"8-6-onmousedown、onmouseup-以及-onclick-事件\"><a href=\"#8-6-onmousedown、onmouseup-以及-onclick-事件\" class=\"headerlink\" title=\"8.6 onmousedown、onmouseup 以及 onclick 事件\"></a>8.6 <code>onmousedown</code>、<code>onmouseup</code> 以及 <code>onclick</code> 事件</h3><p><code>onmousedown</code>, <code>onmouseup</code> 以及 <code>onclick</code> 构成了鼠标点击事件的所有部分。首先当点击鼠标按钮时，会触发 <code>onmousedown</code> 事件，当释放鼠标按钮时，会触发 <code>onmouseup</code> 事件，最后，当完成鼠标点击时，会触发 <code>onclick</code> 事件。</p>\n<hr>\n<h2 id=\"9-HTML-DOM-导航\"><a href=\"#9-HTML-DOM-导航\" class=\"headerlink\" title=\"9. HTML DOM 导航\"></a>9. HTML DOM 导航</h2><p>使用节点关系在节点树中导航。</p>\n<h3 id=\"9-1-HTML-DOM-节点列表\"><a href=\"#9-1-HTML-DOM-节点列表\" class=\"headerlink\" title=\"9.1 HTML DOM 节点列表\"></a>9.1 HTML DOM 节点列表</h3><p><code>getElementsByTagName(&quot;TagName&quot;)</code> 方法返回节点列表。节点列表是一个节点数组。<br>可通过下标访问这些节点。例如第二个节点：<code>y = x[1];</code></p>\n<blockquote>\n<p>注：下标号从 0 开始。</p>\n</blockquote>\n<h3 id=\"9-2-HTML-DOM-节点列表长度\"><a href=\"#9-2-HTML-DOM-节点列表长度\" class=\"headerlink\" title=\"9.2 HTML DOM 节点列表长度\"></a>9.2 HTML DOM 节点列表长度</h3><p><code>length</code> 属性定义节点列表中节点的数量。<br>可使用 <code>length</code> 属性来循环节点列表。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=document.getElementsByTagName(&quot;p&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">for (i=0;i&lt;x.length;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">document.write(x[i].innerHTML);</span><br><span class=\"line\">document.write(&quot;&lt;br /&gt;&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9-3-导航节点关系\"><a href=\"#9-3-导航节点关系\" class=\"headerlink\" title=\"9.3 导航节点关系\"></a>9.3 导航节点关系</h3><p><code>parentNode</code>，<code>firstChild</code>，<code>lastChild</code><br><code>firstChild</code> 属性可用于访问元素的文本：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">x=document.getElementById(&quot;intro&quot;);</span><br><span class=\"line\">document.write(x.firstChild.nodeValue);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"9-4-DOM-根节点\"><a href=\"#9-4-DOM-根节点\" class=\"headerlink\" title=\"9.4 DOM 根节点\"></a>9.4 DOM 根节点</h3><p>有两个特殊的属性，可以访问全部文档：<br><code>document.documentElement</code> - 全部文档<br><code>document.body</code> - 文档的主体</p>\n<h3 id=\"9-5-childNodes-和-nodeValue\"><a href=\"#9-5-childNodes-和-nodeValue\" class=\"headerlink\" title=\"9.5 childNodes 和 nodeValue\"></a>9.5 <code>childNodes</code> 和 <code>nodeValue</code></h3><p>除了 <code>innerHTML</code> 属性，还可以使用 <code>childNodes</code> 和 <code>nodeValue</code> 属性来获取元素的内容。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var txt=document.getElementById(&quot;intro&quot;).childNodes[0].nodeValue;</span><br><span class=\"line\">document.write(txt);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/tags/JavaScript.json"}]}