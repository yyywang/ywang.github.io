{"title":"JS Window BOM","slug":"JS-Window-BOM","date":"2019-01-17T08:53:46.000Z","updated":"2019-01-17T09:07:47.443Z","comments":true,"path":"api/articles/JS-Window-BOM.json","photos":[],"link":"","excerpt":"1. 浏览器对象模型（BOM）BOM 使 JavaScript 有能力与浏览器“对话”。<br>BOM 尚无正式标准。<br>由于现代浏览器已经（几乎）实现了 JavaScript 交互性方面的相同方法和属性，因此常被认为是 BOM 的方法和属性。<br>","covers":null,"content":"<h2 id=\"1-浏览器对象模型（BOM）\"><a href=\"#1-浏览器对象模型（BOM）\" class=\"headerlink\" title=\"1. 浏览器对象模型（BOM）\"></a>1. 浏览器对象模型（BOM）</h2><p>BOM 使 JavaScript 有能力与浏览器“对话”。<br>BOM 尚无正式标准。<br>由于现代浏览器已经（几乎）实现了 JavaScript 交互性方面的相同方法和属性，因此常被认为是 BOM 的方法和属性。<br><a id=\"more\"></a></p>\n<h3 id=\"1-1-Window-对象\"><a href=\"#1-1-Window-对象\" class=\"headerlink\" title=\"1.1 Window 对象\"></a>1.1 <code>Window</code> 对象</h3><p>它表示浏览器窗口。<br>所有 JavaScript 全局对象、函数以及变量均自动成为 <code>window</code> 对象的成员。<br>全局变量是 <code>window</code> 对象的属性。<br>全局函数是 <code>window</code> 对象的方法。<br><strong>甚至 HTML DOM 的 <code>document</code> 也是 <code>window</code> 对象的属性之一。</strong></p>\n<h3 id=\"1-2-Window-尺寸（浏览器的视口，不包括工具栏和滚动条）\"><a href=\"#1-2-Window-尺寸（浏览器的视口，不包括工具栏和滚动条）\" class=\"headerlink\" title=\"1.2 Window 尺寸（浏览器的视口，不包括工具栏和滚动条）\"></a>1.2 <code>Window</code> 尺寸（浏览器的视口，不包括工具栏和滚动条）</h3><p>对于 Internet Explorer、Chrome、Firefox、Opera 以及 Safari：  </p>\n<ul>\n<li><code>window.innerHeight</code> - 浏览器窗口的内部高度  </li>\n<li><code>window.innerWidth</code> - 浏览器窗口的内部宽度</li>\n</ul>\n<p>对于 Internet Explorer 8、7、6、5：  </p>\n<ul>\n<li><code>document.documentElement.clientHeight</code>  </li>\n<li><code>document.documentElement.clientWidth</code></li>\n</ul>\n<p>或者  </p>\n<ul>\n<li><code>document.body.clientHeight</code>  </li>\n<li><code>document.body.clientWidth</code></li>\n</ul>\n<blockquote>\n<p>注：实用的 JavaScript 方案（涵盖所有浏览器）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var w=window.innerWidth</span><br><span class=\"line\">|| document.documentElement.clientWidth</span><br><span class=\"line\">|| document.body.clientWidth;</span><br><span class=\"line\"></span><br><span class=\"line\">var h=window.innerHeight</span><br><span class=\"line\">|| document.documentElement.clientHeight</span><br><span class=\"line\">|| document.body.clientHeight;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"1-3-其他-Window-方法\"><a href=\"#1-3-其他-Window-方法\" class=\"headerlink\" title=\"1.3 其他 Window 方法\"></a>1.3 其他 <code>Window</code> 方法</h3><ul>\n<li><code>window.open()</code> - 打开新窗口</li>\n<li><code>window.close()</code> - 关闭当前窗口</li>\n<li><code>window.moveTo()</code> - 移动当前窗口</li>\n<li><code>window.resizeTo()</code> - 调整当前窗口的尺寸</li>\n</ul>\n<hr>\n<h2 id=\"2-window-screen\"><a href=\"#2-window-screen\" class=\"headerlink\" title=\"2. window.screen\"></a>2. <code>window.screen</code></h2><p>此对象包含有关用户屏幕的信息。<br><code>window.screen</code> 对象在编写时<strong>可不使用</strong> <code>window</code> 这个前缀。<br>一些属性：  </p>\n<ul>\n<li><code>screen.availWidth</code> - 可用的屏幕宽度  </li>\n<li><code>screen.availHeight</code> - 可用的屏幕高度</li>\n</ul>\n<hr>\n<h2 id=\"3-window-location\"><a href=\"#3-window-location\" class=\"headerlink\" title=\"3. window.location\"></a>3. <code>window.location</code></h2><p>此对象用于获得当前页面的地址（URL），并把浏览器重新定向到新的页面。<br><code>window.location</code> 对象在编写时<strong>可不使用</strong> <code>window</code> 这个前缀。  </p>\n<ul>\n<li><code>location.hostname</code> - 返回 web 主机的域名</li>\n<li><code>location.pathname</code> - 返回当前页面的路径和文件名</li>\n<li><code>location.port</code> - 返回 web 主机的端口（80 或 443）</li>\n<li><code>location.protocol</code> - 返回所使用的 web 协议（http:// 或 https://）</li>\n<li><code>location.href</code> - 返回当前页面的 URL</li>\n<li><code>location.assign(&quot;URL&quot;)</code> - 加载新的 URL 文档</li>\n</ul>\n<hr>\n<h2 id=\"4-window-history\"><a href=\"#4-window-history\" class=\"headerlink\" title=\"4. window.history\"></a>4. <code>window.history</code></h2><p>此对象包含浏览器的历史。<br><code>window.history</code> 对象在编写时<strong>可不使用</strong> <code>window</code> 这个前缀。<br>为了保护用户隐私，对 JavaScript 访问该对象的方法做出了限制。<br><code>history.back()</code> - 加载历史列表中的前一个 URL，与在浏览器点击后退按钮相同。<br><code>histor.forward()</code> - 加载历史列表中的下一个 URL，与在浏览器中点击按钮向前相同。</p>\n<hr>\n<h2 id=\"5-window-navigator\"><a href=\"#5-window-navigator\" class=\"headerlink\" title=\"5. window.navigator\"></a>5. window.navigator</h2><p>此对象包含有关访问者浏览器的信息。<br><code>window.navigator</code> 对象在编写时<strong>可不使用</strong> <code>window</code> 这个前缀。  </p>\n<ul>\n<li><code>navigator.appCodeName</code>  </li>\n<li><code>navigator.appName</code>  </li>\n<li><code>navigator.appVersion</code>  </li>\n<li><code>navigator.cookieEnabled</code>  </li>\n<li><code>navigator.platform</code>  </li>\n<li><code>navigator.userAgent</code>  </li>\n<li><code>navigator.systemLanguage</code></li>\n</ul>\n<blockquote>\n<p>注：来自 <code>navigator</code> 对象的信息具有误导性，不应该被用于检测浏览器版本，这是因为：  </p>\n<ul>\n<li><code>navigator</code> 数据可被浏览器使用者更改  </li>\n<li>浏览器无法报告晚于浏览器发布的新操作系统</li>\n</ul>\n</blockquote>\n<h3 id=\"5-1-浏览器检测\"><a href=\"#5-1-浏览器检测\" class=\"headerlink\" title=\"5.1 浏览器检测\"></a>5.1 浏览器检测</h3><p>使用对象检测可用来嗅探不同的浏览器。<br>由于不同的浏览器支持不同的对象，可以使用对象来检测浏览器。<br>例如：由于只有 Opera 支持属性 <code>window.opera</code>，可以据此识别出 Opera。</p>\n<hr>\n<h2 id=\"6-JS-消息框\"><a href=\"#6-JS-消息框\" class=\"headerlink\" title=\"6. JS 消息框\"></a>6. JS 消息框</h2><p>三种消息框：警告框、确认框、提示框。</p>\n<h3 id=\"6-1-警告框-alert\"><a href=\"#6-1-警告框-alert\" class=\"headerlink\" title=\"6.1 警告框 - alert()\"></a>6.1 警告框 - <code>alert()</code></h3><p>警告框常用于确保用户可以得到某些信息。<br>当警告框出现后，用户需要点击确定按钮才能继续操作。<br>语法：<code>alert(&quot;文本&quot;)</code></p>\n<h3 id=\"6-2-确认框-confirm\"><a href=\"#6-2-确认框-confirm\" class=\"headerlink\" title=\"6.2 确认框 - confirm()\"></a>6.2 确认框 - <code>confirm()</code></h3><p>确认框用于使用户可以验证或者接受某些信息。<br>当确认框出现后，用户需要点击确定或者取消按钮才能继续进行操作。<br>如果用户点击确认，那么返回值为 <code>true</code>，如果点击取消，那么返回值为 <code>false</code>。<br>语法：<code>confirm(&quot;文本&quot;)</code></p>\n<h3 id=\"6-3-提示框-prompt\"><a href=\"#6-3-提示框-prompt\" class=\"headerlink\" title=\"6.3 提示框 - prompt()\"></a>6.3 提示框 - <code>prompt()</code></h3><p>提示框经常用于提示用户在进入页面前输入某个值。<br>当提示框出现后，用户需要输入某个值，然后点击确认或取消按钮才能继续操纵。<br>如果用户点击确认，那么返回值为输入的值。如果用户点击取消，那么返回值为 <code>null</code>。</p>\n<hr>\n<h2 id=\"7-JS-计时\"><a href=\"#7-JS-计时\" class=\"headerlink\" title=\"7. JS 计时\"></a>7. JS 计时</h2><p>通过使用 JavaScript，我们可以做到在一个设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行。我们称之为计时事件。<br>两个关键方法：  </p>\n<ul>\n<li><code>setTimeout()</code> - 未来的某时执行代码  </li>\n<li><code>clearTimeout()</code> - 取消 <code>setTimeout()</code></li>\n</ul>\n<h3 id=\"7-1-setTimeout\"><a href=\"#7-1-setTimeout\" class=\"headerlink\" title=\"7.1 setTimeout()\"></a>7.1 <code>setTimeout()</code></h3><p>语法：<code>var t = setTimeout(&quot;JavaScript 语句&quot;, 毫秒)</code><br><code>setTimeout()</code> 方法会返回某个值。在上面的语句中，值被存储在名为 <code>t</code> 的变量中。假设希望取消这个 <code>setTimeout()</code> , 可以使用这个变量名来指定它。<br><code>setTimeout()</code> 的第一个参数是含有 JavaScript 语句的字符串，可以调用函数。第二个参数指示从当前起多少毫秒后执行第一个参数。  </p>\n<blockquote>\n<p>注：递归函数实现无穷循环的计时器。</p>\n</blockquote>\n<h3 id=\"7-2-clearTimeout\"><a href=\"#7-2-clearTimeout\" class=\"headerlink\" title=\"7.2 clearTimeout()\"></a>7.2 <code>clearTimeout()</code></h3><p>语法：<code>clearTimeout(setTimeout_variable)</code></p>\n<hr>\n<h2 id=\"8-JS-Cookies\"><a href=\"#8-JS-Cookies\" class=\"headerlink\" title=\"8. JS Cookies\"></a>8. JS Cookies</h2><p><code>cookie</code> 用来识别用户。<br><code>cookie</code> 是存储于访问者的计算机中的变量。每当同一台计算机通过浏览器请求某个页面时，就会发送这个 <code>cookie</code>。可使用 JavaScript 来创建和取回 <code>cookie</code> 的值。</p>\n<h3 id=\"8-1-创建和存储-cookie\"><a href=\"#8-1-创建和存储-cookie\" class=\"headerlink\" title=\"8.1 创建和存储 cookie\"></a>8.1 创建和存储 <code>cookie</code></h3><p><code>document.cookie</code></p>\n","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}]}