{"total":9,"pageSize":10,"pageCount":1,"data":[{"title":"JS 本地对象和内置对象","slug":"js-object","date":"2019-03-20T07:24:47.000Z","updated":"2019-03-20T07:58:53.241Z","comments":true,"path":"api/articles/js-object.json","excerpt":"","keywords":null,"cover":"/2019/03/20/js-object/ArrayPrototype.JPG","content":"<h2 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h2><p>JavaScript 中的所有事物都是对象：字符串、数值、数组、函数…<br>JavaScript 提供多个内建对象，比如：String、Date、Array 等等。<br>对象只是带有<strong>属性和方法</strong>的特殊数据类型。<br>访问对象的属性：objectName.propertyName<br>访问对象的方法：objectName.methodName()  </p>\n<hr>\n<p>##2. JS Array 对象<br>用于在单个的变量中存储多个值。</p>\n<h3 id=\"2-1-创建语法\"><a href=\"#2-1-创建语法\" class=\"headerlink\" title=\"2.1 创建语法\"></a>2.1 创建语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Array();</span><br><span class=\"line\">new Array(size);</span><br><span class=\"line\">new Array(element0, element1, ..., elementn);</span><br></pre></td></tr></table></figure>\n<p>参数 <code>size</code> 是期望的数组元素个数。返回的数组中 <code>length</code> 字段将被设为 <code>size</code> 的值。<br>参数 <code>element ..., elementn</code> 是参数列表。当使用这些参数来调用构造函数 <code>Array()</code> 时，新创建的数组的元素就会被初始化为这些值。它的 <code>length</code> 字段也会被设置为参数的个数。<br><strong>返回值：</strong><br>返回新创建并被初始化了的数组。<br>如果调用构造函数 <code>Array()</code> 时没有使用参数，那么返回的数组为空，<code>length</code> 字段为 0。<br>当调用构造函数时只传递给它一个数字参数，该构造函数将返回具有指定个数、元素为 <code>undefined</code> 的数组。<br>当其他参数调用 <code>Array()</code> 时，该构造函数将用参数指定的值初始化数组。<br>当把构造函数作为函数调用，不使用 <code>new</code> 运算符时，它的行为与使用 <code>new</code> 运算符调用它时的行为完全一样。  </p>\n<h3 id=\"2-2-对象属性\"><a href=\"#2-2-对象属性\" class=\"headerlink\" title=\"2.2 对象属性\"></a>2.2 对象属性</h3><p><img src=\"/2019/03/20/js-object/ArrayPrototype.JPG\" alt=\"ArrayPrototype\"></p>\n<h3 id=\"2-3-对象方法\"><a href=\"#2-3-对象方法\" class=\"headerlink\" title=\"2.3 对象方法\"></a>2.3 对象方法</h3><p><img src=\"/2019/03/20/js-object/ArrayMethod.JPG\" alt=\"ArrayMethod\"></p>\n<hr>\n<h2 id=\"3-JS-Boolean-对象\"><a href=\"#3-JS-Boolean-对象\" class=\"headerlink\" title=\"3. JS Boolean 对象\"></a>3. JS Boolean 对象</h2><p><code>Boolean</code> 对象表示两个值：<code>true</code> 或 <code>false</code>。</p>\n<h3 id=\"3-1-创建语法\"><a href=\"#3-1-创建语法\" class=\"headerlink\" title=\"3.1 创建语法\"></a>3.1 创建语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Boolean(value);\t//构造函数</span><br><span class=\"line\">Boolean(value);\t\t//转换函数</span><br></pre></td></tr></table></figure>\n<p>参数 <code>value</code> 为布尔对象存放的值或者要转换成布尔值的值。<br><strong>返回值：</strong><br>当作为一个构造函数（带有运算符 <code>new</code>）调用时，<code>Boolean()</code> 将把它的参数转换成一个布尔值，并且返回一个包含该值的 <code>Boolean</code> 对象。<br>如果作为一个函数（不带有运算符 <code>new</code>）调用时，<code>Boolean()</code> 只将把它的参数转换成一个原始的布尔值，并且返回这个值。<br><strong>注：</strong>如果省略 <code>value</code> 参数，或者设置为 <code>0、-0、null、&quot;&quot;、false、undefined 或 NaN</code>，则该对象设置为 <code>false</code>。否则设置为 <code>true</code>（即使 <code>value</code> 参数是字符串 <code>false</code>）。</p>\n<h3 id=\"3-2-对象属性\"><a href=\"#3-2-对象属性\" class=\"headerlink\" title=\"3.2 对象属性\"></a>3.2 对象属性</h3><p><img src=\"/2019/03/20/js-object/BooleanPrototype.JPG\" alt=\"BooleanPrototype\"></p>\n<p>###3.3 对象方法<br><img src=\"/2019/03/20/js-object/BooleanMethod.JPG\" alt=\"BooleanMethod\"></p>\n<hr>\n<h2 id=\"4-JS-Date-对象\"><a href=\"#4-JS-Date-对象\" class=\"headerlink\" title=\"4. JS Date 对象\"></a>4. JS Date 对象</h2><p>用于处理日期和时间。</p>\n<h3 id=\"4-1-创建语法\"><a href=\"#4-1-创建语法\" class=\"headerlink\" title=\"4.1 创建语法\"></a>4.1 创建语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Date 对象会自动把当前日期和时间保存为其初始值。</span><br><span class=\"line\">var myDate=new Date()</span><br></pre></td></tr></table></figure>\n<p>###4.2 对象属性<br><img src=\"/2019/03/20/js-object/DatePrototype.JPG\" alt=\"DatePrototype\"></p>\n<p>###4.3 对象方法<br><img src=\"/2019/03/20/js-object/DateMethod01.JPG\" alt=\"DateMethod01\"><br><img src=\"/2019/03/20/js-object/DateMethod02.JPG\" alt=\"DateMethod02\"></p>\n<hr>\n<h2 id=\"5-JS-Math-对象\"><a href=\"#5-JS-Math-对象\" class=\"headerlink\" title=\"5. JS Math 对象\"></a>5. JS Math 对象</h2><p>用于执行数学任务。</p>\n<h3 id=\"5-1-使用语法\"><a href=\"#5-1-使用语法\" class=\"headerlink\" title=\"5.1 使用语法\"></a>5.1 使用语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用 Math 的属性</span><br><span class=\"line\">var pi_value=Math.PI;</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用 Math 的方法</span><br><span class=\"line\">var sqrt_value=Math.sqrt(15);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：<code>Math</code> 对象并不像 <code>Date</code> 和 <code>String</code> 那样是对象的类，因此没有构造函数 <code>Math()</code>，像 <code>Math.sin()</code> 这样的函数只是函数，不是某个对象的方法。您无需创建它，通过把 <code>Math</code> 作为对象使用就可以调用其所有属性和方法。</p>\n</blockquote>\n<h3 id=\"5-2-对象属性\"><a href=\"#5-2-对象属性\" class=\"headerlink\" title=\"5.2 对象属性\"></a>5.2 对象属性</h3><p><img src=\"/2019/03/20/js-object/MathPrototype.JPG\" alt=\"MathPrototype\"></p>\n<h3 id=\"5-3-对象方法\"><a href=\"#5-3-对象方法\" class=\"headerlink\" title=\"5.3 对象方法\"></a>5.3 对象方法</h3><p><img src=\"/2019/03/20/js-object/MathMethod.JPG\" alt=\"MathMethod\"></p>\n<hr>\n<h2 id=\"6-JS-Number-对象\"><a href=\"#6-JS-Number-对象\" class=\"headerlink\" title=\"6. JS Number 对象\"></a>6. JS Number 对象</h2><p>是原始数值的包装对象。<br>所有 JavaScript 数字均为 64 位。<br><strong>数值写法：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var pi=3.14;    // 使用小数点</span><br><span class=\"line\">var x=34;       // 不使用小数点</span><br><span class=\"line\"></span><br><span class=\"line\">// 极大或极小的数字可通过科学（指数）计数法来写</span><br><span class=\"line\">var y=123e5;    // 12300000</span><br><span class=\"line\">var z=123e-5;   // 0.00123</span><br></pre></td></tr></table></figure></p>\n<p><strong>数值精度：</strong><br>整数最多为 15 位。<br>小数的最大位数是 17，但是浮点运算并不总是 100% 准确。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=0.2+0.1;</span><br><span class=\"line\">// 结果</span><br><span class=\"line\">x = 0.30000000000000004</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-1-创建语法\"><a href=\"#6-1-创建语法\" class=\"headerlink\" title=\"6.1 创建语法\"></a>6.1 创建语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myNum=new Number(value);</span><br><span class=\"line\">var myNum=Number(value);</span><br></pre></td></tr></table></figure>\n<p>参数 <code>value</code> 是要创建的 <code>Number</code> 对象的数值，或是要转换成数字的值。<br><strong>返回值：</strong><br>当 <code>Number()</code> 和运算符 <code>new</code> 一起作为构造函数使用时，它返回一个新创建的 <code>Number</code> 对象。如果不用 <code>new</code> 运算符，把 <code>Number()</code> 作为一个函数来调用，它将把自己的参数转换成一个原始的数值，并且返回这个值（如果转换失败，则返回 <code>NaN</code>）。</p>\n<h3 id=\"6-2-对象属性\"><a href=\"#6-2-对象属性\" class=\"headerlink\" title=\"6.2 对象属性\"></a>6.2 对象属性</h3><p><img src=\"/2019/03/20/js-object/NumberPrototype.JPG\" alt=\"NumberPrototype\"></p>\n<h3 id=\"6-3-对象方法\"><a href=\"#6-3-对象方法\" class=\"headerlink\" title=\"6.3 对象方法\"></a>6.3 对象方法</h3><p><img src=\"/2019/03/20/js-object/NumberMethod.JPG\" alt=\"NumberMethod\"></p>\n<hr>\n<h2 id=\"7-JS-String-对象\"><a href=\"#7-JS-String-对象\" class=\"headerlink\" title=\"7. JS String 对象\"></a>7. JS String 对象</h2><p>用于处理文本（字符串）。  </p>\n<blockquote>\n<p>注：JavaScript 的字符串是不可变的（immutable），<code>String</code> 类定义的方法都不能改变字符串的内容。像 <code>String.toUpperCase()</code> 这样的方法，返回的是全新的字符串，而不是修改原始字符串。</p>\n</blockquote>\n<h3 id=\"7-1-创建语法\"><a href=\"#7-1-创建语法\" class=\"headerlink\" title=\"7.1 创建语法\"></a>7.1 创建语法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new String(s);</span><br><span class=\"line\">String(s);</span><br></pre></td></tr></table></figure>\n<p>参数 <code>s</code> 是要存储在 <code>String</code> 对象中或转换成原始字符串的值。<br><strong>返回值：</strong><br>当 <code>String()</code> 和运算符 <code>new</code> 一起作为构造函数使用时，它返回一个新创建的 <code>String</code> 对象，存放的是字符串 <code>s</code> 或 s 的字符串表示。<br>当不用 <code>new</code> 运算符调用 <code>String()</code> 时，它只把 <code>s</code> 转换成原始的字符串，并返回转换后的值。</p>\n<h3 id=\"7-2-对象属性\"><a href=\"#7-2-对象属性\" class=\"headerlink\" title=\"7.2 对象属性\"></a>7.2 对象属性</h3><p><img src=\"/2019/03/20/js-object/StringPrototype.JPG\" alt=\"StringPrototype\"></p>\n<h3 id=\"7-3-对象方法\"><a href=\"#7-3-对象方法\" class=\"headerlink\" title=\"7.3 对象方法\"></a>7.3 对象方法</h3><p><img src=\"/2019/03/20/js-object/StringMethod.JPG\" alt=\"StringMethod\"></p>\n<hr>\n<h2 id=\"8-JS-RegExp-对象\"><a href=\"#8-JS-RegExp-对象\" class=\"headerlink\" title=\"8. JS RegExp 对象\"></a>8. JS RegExp 对象</h2><p>此对象表示正则表达式，它是对字符串执行模式匹配的强大工具。</p>\n<h3 id=\"8-1-创建语法\"><a href=\"#8-1-创建语法\" class=\"headerlink\" title=\"8.1 创建语法\"></a>8.1 创建语法</h3><p><strong>直接量语法：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/pattern/attributes</span><br></pre></td></tr></table></figure></p>\n<p><strong>创建 RegExp 对象的语法：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new RegExp(pattern, attributes);</span><br></pre></td></tr></table></figure></p>\n<p>参数 <code>pattern</code> 是一个字符串，指定了正则表达式的模式或其他正则表达式。<br>参数 <code>attributes</code> 是一个可选的字符串，包含属性 <code>&quot;g&quot;、&quot;i&quot; 和 &quot;m&quot;</code>，分别用于指定全局匹配、区分大小写的匹配和多行匹配。如果 <code>pattern</code> 是正则表达式，而不是字符串，则必须省略该参数。<br><strong>返回值：</strong><br>一个新的 <code>RegExp</code> 对象，具有指定的模式和标志。如果参数 <code>pattern</code> 是正则表达式而不是字符串，那么 <code>RegExp()</code> 构造函数将用与指定的 <code>RegExp</code> 相同的模式和标志创建一个新的 <code>RegExp</code> 对象。<br>如果不用 <code>new</code> 运算符，而将 <code>RegExp()</code> 作为函数调用，那么它的行为与用 <code>new</code> 运算符调用时一样，只是当 <code>pattern</code> 是正则表达式时，它只返回 <code>pattern</code>，而不再创建一个新的 <code>RegExp</code> 对象。<br><strong>抛出：</strong><br><code>SyntaxError</code> - 如果 <code>pattern</code> 不是合法的正则表达式，或 <code>attributes</code> 含有 <code>&quot;g&quot;、&quot;i&quot; 和 &quot;m&quot;</code> 之外的字符，抛出该异常。<br><code>TypeError</code> - 如果 <code>pattern</code> 是 <code>RegExp</code> 对象，但没有省略 <code>attributes</code> 参数，抛出该异常。</p>\n<h3 id=\"8-2-修饰符\"><a href=\"#8-2-修饰符\" class=\"headerlink\" title=\"8.2 修饰符\"></a>8.2 修饰符</h3><p><img src=\"/2019/03/20/js-object/RegExpDescription.JPG\" alt=\"RegExpDescription\"></p>\n<h3 id=\"8-3-方括号\"><a href=\"#8-3-方括号\" class=\"headerlink\" title=\"8.3 方括号\"></a>8.3 方括号</h3><p>方括号用于查找某个范围内的字符。<br><img src=\"/2019/03/20/js-object/RegExpSquare.JPG\" alt=\"RegExpSquare\"></p>\n<h3 id=\"8-4-元字符\"><a href=\"#8-4-元字符\" class=\"headerlink\" title=\"8.4 元字符\"></a>8.4 元字符</h3><p>元字符（Metacharacter）是拥有特殊含义的字符。<br><img src=\"/2019/03/20/js-object/RegExpMeta.JPG\" alt=\"RegExpMeta\"></p>\n<h3 id=\"8-5-量词\"><a href=\"#8-5-量词\" class=\"headerlink\" title=\"8.5 量词\"></a>8.5 量词</h3><p><img src=\"/2019/03/20/js-object/RegExpQuantify.JPG\" alt=\"RegExpQuantify\"></p>\n<h3 id=\"8-6-对象属性\"><a href=\"#8-6-对象属性\" class=\"headerlink\" title=\"8.6 对象属性\"></a>8.6 对象属性</h3><p><img src=\"/2019/03/20/js-object/RegExpPrototype.JPG\" alt=\"RegExpPrototype\"></p>\n<h3 id=\"8-7-对象方法\"><a href=\"#8-7-对象方法\" class=\"headerlink\" title=\"8.7 对象方法\"></a>8.7 对象方法</h3><p><img src=\"/2019/03/20/js-object/RegExpMethod.JPG\" alt=\"RegExpMethod\"></p>\n<h3 id=\"8-8-支持正则表达式的-String-对象的方法\"><a href=\"#8-8-支持正则表达式的-String-对象的方法\" class=\"headerlink\" title=\"8.8 支持正则表达式的 String 对象的方法\"></a>8.8 支持正则表达式的 String 对象的方法</h3><p><img src=\"/2019/03/20/js-object/RegExpStringObj.JPG\" alt=\"RegExpStringObj\"></p>\n<hr>\n<h2 id=\"9-JS-全局对象\"><a href=\"#9-JS-全局对象\" class=\"headerlink\" title=\"9. JS 全局对象\"></a>9. JS 全局对象</h2><p>全局对象是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。全局对象不是任何对象的属性，所以它没有名称。<br>在顶层 JavaScript 代码中，可以用关键字 <code>this</code> 引用全局对象。但通常不必用这种方式引用全局对象，因为全局对象是作用域链的头，这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询。</p>\n<h3 id=\"9-1-顶层函数（全局函数）\"><a href=\"#9-1-顶层函数（全局函数）\" class=\"headerlink\" title=\"9.1 顶层函数（全局函数）\"></a>9.1 顶层函数（全局函数）</h3><p><img src=\"/2019/03/20/js-object/TopFunction.JPG\" alt=\"TopFunction\"></p>\n<h3 id=\"9-2-顶层属性（全局属性）\"><a href=\"#9-2-顶层属性（全局属性）\" class=\"headerlink\" title=\"9.2 顶层属性（全局属性）\"></a>9.2 顶层属性（全局属性）</h3><p><img src=\"/2019/03/20/js-object/TopPrototype.JPG\" alt=\"TopPrototype\"></p>\n<hr>\n<h2 id=\"10-JS-事件句柄\"><a href=\"#10-JS-事件句柄\" class=\"headerlink\" title=\"10. JS 事件句柄\"></a>10. JS 事件句柄</h2><p>HTML 4.0 的新特性之一是有能力使 HTML 事件触发浏览器中的动作（action），比如当用户点击某个 HTML 元素时启动一段 JavaScript。下面是一个属性列表，这些属性可插入 HTML 标签来定义事件动作。<br><img src=\"/2019/03/20/js-object/JSEvents.JPG\" alt=\"JSEvents\"></p>\n","text":"1. 概述JavaScript 中的所有事物都是对象：字符串、数值、数组、函数…<br>JavaScript 提供多个内建对象，比如：String、Date、Array 等等。<br>对象只是带有属性和方法的特殊数据类型。<br>访问对象的属性：objectName.proper","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}]},{"title":"Python3 基础","slug":"Python3-Basic","date":"2019-01-19T07:22:56.000Z","updated":"2019-01-19T09:32:37.954Z","comments":true,"path":"api/articles/Python3-Basic.json","excerpt":"<h2 id=\"1-基础\"><a href=\"#1-基础\" class=\"headerlink\" title=\"1. 基础\"></a>1. 基础</h2><h3 id=\"1-1-查看-Python-版本\"><a href=\"#1-1-查看-Python-版本\" class=\"headerlink\" title=\"1.1 查看 Python 版本\"></a>1.1 查看 Python 版本</h3><p>在命令窗口输入：<code>python -V</code><br></p>","keywords":null,"cover":"/2019/01/19/Python3-Basic/Intercept.png","content":null,"text":"1. 基础1.1 查看 Python 版本在命令窗口输入：python -V<br>1.2 编码默认情况下，Python3 源文件以 UTF-8 编码，也可为源文件指定不同的编码：<br>1<br># _*_ coding: gb-2312 _*_<br>1.3 保留字（33）P","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Python","slug":"Python","count":1,"path":"api/tags/Python.json"}]},{"title":"JS Window BOM","slug":"JS-Window-BOM","date":"2019-01-17T08:53:46.000Z","updated":"2019-01-17T09:07:47.443Z","comments":true,"path":"api/articles/JS-Window-BOM.json","excerpt":"<h2 id=\"1-浏览器对象模型（BOM）\"><a href=\"#1-浏览器对象模型（BOM）\" class=\"headerlink\" title=\"1. 浏览器对象模型（BOM）\"></a>1. 浏览器对象模型（BOM）</h2><p>BOM 使 JavaScript 有能力与浏览器“对话”。<br>BOM 尚无正式标准。<br>由于现代浏览器已经（几乎）实现了 JavaScript 交互性方面的相同方法和属性，因此常被认为是 BOM 的方法和属性。<br></p>","keywords":null,"cover":null,"content":null,"text":"1. 浏览器对象模型（BOM）BOM 使 JavaScript 有能力与浏览器“对话”。<br>BOM 尚无正式标准。<br>由于现代浏览器已经（几乎）实现了 JavaScript 交互性方面的相同方法和属性，因此常被认为是 BOM 的方法和属性。<br>1.1 Window 对","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}]},{"title":"JS HTML DOM","slug":"JS-HTML-DOM","date":"2019-01-16T13:22:13.000Z","updated":"2019-01-16T13:46:19.535Z","comments":true,"path":"api/articles/JS-HTML-DOM.json","excerpt":"<h2 id=\"1-DOM（Document-Object-Model）\"><a href=\"#1-DOM（Document-Object-Model）\" class=\"headerlink\" title=\"1. DOM（Document Object Model）\"></a>1. DOM（Document Object Model）</h2><p>DOM 是 W3C（万维网联盟）的标准。<br>DOM 定义了访问 HTML 和 XML 文档的标准：<br>“W3C 文档对象模型（DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档地内容、结构和样式。”<br></p>","keywords":null,"cover":"/2019/01/16/JS-HTML-DOM/HTML_DOM_Tree.gif","content":null,"text":"1. DOM（Document Object Model）DOM 是 W3C（万维网联盟）的标准。<br>DOM 定义了访问 HTML 和 XML 文档的标准：<br>“W3C 文档对象模型（DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档地内容、结构和样式","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}]},{"title":"ECMAScript","slug":"ECMAScript","date":"2019-01-10T07:00:41.000Z","updated":"2019-01-11T03:50:24.036Z","comments":true,"path":"api/articles/ECMAScript.json","excerpt":"<blockquote>\n<p><strong>JavaScript 的核心 ECMAScript 描述了该语言的语法和基本对象。</strong></p>\n</blockquote>","keywords":null,"cover":"/2019/01/10/ECMAScript/SmallPascal.JPG","content":null,"text":"JavaScript 的核心 ECMAScript 描述了该语言的语法和基本对象。1. 基础1.1 语法1.1.1 变量是弱类型的，定义变量时只用 var 运算符，可以将它初始化为任何值，因此，可以随时改变变量所存数据的类型（尽量避免这样做）。1.2 变量1.2.1 命名变量规则","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}]},{"title":"《CSS纲要》—— 选择器","slug":"CSS-GangYao-Selector","date":"2018-12-26T11:03:11.000Z","updated":"2019-01-10T09:57:55.015Z","comments":true,"path":"api/articles/CSS-GangYao-Selector.json","excerpt":"<h2 id=\"楔子\"><a href=\"#楔子\" class=\"headerlink\" title=\"楔子\"></a>楔子</h2><p>如果说 HTML 是招式返璞归真的要诀与精髓所在，那么 CSS 便是裁红点翠的装饰。  </p>","keywords":null,"cover":"/2018/12/26/CSS-GangYao-Selector/CSS-Grammar.jpg","content":null,"text":"楔子如果说 HTML 是招式返璞归真的要诀与精髓所在，那么 CSS 便是裁红点翠的装饰。  1. CSS指层叠样式表（Cascading Style Sheets）为了解决内容与样式分离的问题，HTML4.0开始。<br>多个样式定义可层叠为一。层叠规则：内联样式（元素内部）-&","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"CSS","slug":"CSS","count":1,"path":"api/tags/CSS.json"}]},{"title":"《HTML真经》—— 招式(颜色)","slug":"HTML-ZhenJing-ZhaoShi","date":"2018-12-25T06:39:13.000Z","updated":"2019-01-11T03:30:42.019Z","comments":true,"path":"api/articles/HTML-ZhenJing-ZhaoShi.json","excerpt":"<h2 id=\"楔子\"><a href=\"#楔子\" class=\"headerlink\" title=\"楔子\"></a>楔子</h2><p>长路漫漫，荆棘坎坷，rgb(0,0,0)=黑色？rgb(255,0,0)=红色？<br>不禁产生困惑，<strong>三位数的组合可以表示任何颜色吗？</strong><br></p>","keywords":null,"cover":"/2018/12/25/HTML-ZhenJing-ZhaoShi/RGB24.JPG","content":null,"text":"楔子长路漫漫，荆棘坎坷，rgb(0,0,0)=黑色？rgb(255,0,0)=红色？<br>不禁产生困惑，三位数的组合可以表示任何颜色吗？<br><br>答案是：可以。一、颜色分解色彩，得到不能再分解的三种基本颜色，我们通常说的三原色，三原色可以混合出所有的颜色。色光三原色为：红","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"HTML","slug":"HTML","count":2,"path":"api/tags/HTML.json"}]},{"title":"《HTML真经》—— 心法","slug":"HTML-ZhenJing-XinFa","date":"2018-12-13T08:22:37.000Z","updated":"2018-12-25T07:15:42.286Z","comments":true,"path":"api/articles/HTML-ZhenJing-XinFa.json","excerpt":"<h2 id=\"楔子\"><a href=\"#楔子\" class=\"headerlink\" title=\"楔子\"></a>楔子</h2><p>少侠之前写过作文吧？<br></p>","keywords":null,"cover":"/2018/12/13/HTML-ZhenJing-XinFa/writing.jpg","content":null,"text":"楔子少侠之前写过作文吧？<br><br> [Figure] 4.符号形式通过标签和属性来实现，通过元素内容体现。","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"HTML","slug":"HTML","count":2,"path":"api/tags/HTML.json"},{"name":"哲思","slug":"哲思","count":1,"path":"api/tags/哲思.json"}]},{"title":"小程序——this","slug":"小程序-this","date":"2018-12-08T08:36:42.000Z","updated":"2018-12-13T09:58:05.404Z","comments":true,"path":"api/articles/小程序-this.json","excerpt":"","keywords":null,"cover":null,"content":"<hr>\n<p>本地选择一图片，并设置为头像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindViewTap: function() &#123;</span><br><span class=\"line\">      wx.chooseImage(&#123; //从本地相册选择图片API</span><br><span class=\"line\">          success: function(res) &#123;</span><br><span class=\"line\">              const tempFilePaths = res.tempFilePaths</span><br><span class=\"line\">              console.log(tempFilePaths)</span><br><span class=\"line\">              this.setData(&#123;avatarUrl: tempFilePaths[0]&#125;)//设置为头像</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure></p>\n<p>报错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot read property &apos;setData&apos; of null;</span><br><span class=\"line\">at pages/index/index bindViewTap function;</span><br><span class=\"line\">at api chooseImage success callback function</span><br><span class=\"line\">TypeError: Cannot read property &apos;setData&apos; of null</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>chooseImage success回调函数不能读取null的setData属性？？？<br>劳资不是用的this吗？怎么会是null？<br>来先看一下this的含义：<strong>指向当前对象</strong>。<br>当前对象…当前对…当前…<br>当前对象，不能访问包含此对象的对象！</p>\n<hr>\n<p>来看当前代表哪个对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.chooseImage(&#123; //从本地相册选择图片API</span><br><span class=\"line\">          success: function(res) &#123;</span><br><span class=\"line\">              const tempFilePaths = res.tempFilePaths</span><br><span class=\"line\">              console.log(tempFilePaths)</span><br><span class=\"line\">              this.setData(&#123;avatarUrl: tempFilePaths[0]&#125;)//设置为头像</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>注意细节：<code>wx.chooseImage()</code><br>好了，当前对象是：<code>wx</code><br><code>wx</code>里没有<code>setData</code>这个属性，所以报以上错误。<br>我们要设置的是<code>Page</code>的<code>data</code>中的值，而<code>Page</code>是包含<code>wx</code>的对象，所以要在<code>Page</code>和<code>wx</code>两对象间“搭桥”。<code>var that = this</code></p>\n<hr>\n<p>正确代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindViewTap: function() &#123;</span><br><span class=\"line\">        var that = this</span><br><span class=\"line\">        wx.chooseImage(&#123; //从本地相册选择图片API</span><br><span class=\"line\">            success: function(res) &#123;</span><br><span class=\"line\">                const tempFilePaths = res.tempFilePaths</span><br><span class=\"line\">                console.log(tempFilePaths)</span><br><span class=\"line\">                that.setData(&#123;</span><br><span class=\"line\">                    avatarUrl: tempFilePaths[0]</span><br><span class=\"line\">                &#125;) //设置为头像</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure></p>\n","text":"本地选择一图片，并设置为头像<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>bindViewTap: function() &#123;<br>      wx.chooseImage(&#123; //从本地相册选择图片API<","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"小程序","slug":"小程序","count":1,"path":"api/tags/小程序.json"}]}]}